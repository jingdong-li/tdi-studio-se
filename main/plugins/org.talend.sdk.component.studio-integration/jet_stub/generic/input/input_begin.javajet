<%/*
  Copyright (C) 2006-2019 Talend Inc. - www.talend.com
   Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/%>

<%@ jet
    imports="
        org.talend.core.model.process.INode
        org.talend.core.runtime.IAdditionalInfo
        org.talend.designer.codegen.config.CodeGeneratorArgument
        org.talend.designer.core.model.components.EParameterName
        org.talend.designer.core.model.components.ElementParameter
        org.talend.core.model.process.ElementParameterParser
        org.talend.core.model.process.EParameterFieldType
        org.talend.core.model.metadata.IMetadataColumn
        org.talend.core.model.metadata.IMetadataTable
        org.talend.core.model.process.IConnection
        org.talend.core.model.process.IConnectionCategory
        org.talend.core.model.process.EConnectionType
        org.talend.core.model.utils.NodeUtil
        java.util.List
    "
%>
<%
final CodeGeneratorArgument codeGenArgument = CodeGeneratorArgument.class.cast(argument);
final INode node = INode.class.cast(codeGenArgument.getArgument());
if(node == null) {
    throw new IllegalArgumentException("node cannot be null");
}
final String cid = node.getUniqueName();
final String originalName = (String)node.getElementParameter(EParameterName.COMPONENT_NAME.getName()).getValue();
final String family = (String)node.getElementParameter(EParameterName.FAMILY.getName()).getValue();
final String version = (String)node.getElementParameter(EParameterName.VERSION.getName()).getValue();
%>

final org.talend.sdk.component.runtime.manager.ComponentManager mgr_<%=cid%> = org.talend.sdk.component.runtime.manager.ComponentManager.instance();
if (mgr_<%=cid%>.getContainer().findAll().isEmpty()) {
    mgr_<%=cid%>.autoDiscoverPlugins(false, true);
}

final org.talend.sdk.component.runtime.record.RecordConverters.MappingMetaRegistry registry_<%=cid%> = new org.talend.sdk.component.runtime.record.RecordConverters.MappingMetaRegistry();

<%@include file="../configuration.javajet"%>

class SimpleInput extends org.talend.sdk.component.runtime.input.InputImpl {
    
    private boolean firstCall = true;

    public SimpleInput(final String rootName, final String name, final String plugin, final java.io.Serializable instance) {
        super(rootName, name, plugin, instance);
    }

    @Override
    public Object next() {
        if (firstCall) {
            this.init();
            firstCall = false;
        }
        return this.readNext();
    }
}


class SimplePartitionMapper extends org.talend.sdk.component.runtime.input.LocalPartitionMapper {
    public SimplePartitionMapper(final String rootName, final String name, final String plugin,
            final java.io.Serializable instance) {
        super(rootName, name, plugin, instance);
    }
    @Override
    public org.talend.sdk.component.runtime.input.Input create() {
        return new SimpleInput(rootName(), name(), plugin(), (java.io.Serializable) getDelegate());
    }
}

org.talend.sdk.component.runtime.input.Mapper tempMapper_<%=cid%> = mgr_<%=cid%>.findMapper("<%=family%>", "<%=originalName%>", <%=version%>, configuration_<%=cid%>)
    .orElseThrow(() -> new IllegalArgumentException("Can't find <%=family%>#<%=originalName%>"));
if (tempMapper_<%=cid%> instanceof org.talend.sdk.component.runtime.input.LocalPartitionMapper) {
    org.talend.sdk.component.runtime.input.LocalPartitionMapper localMapper_<%=cid%> = (org.talend.sdk.component.runtime.input.LocalPartitionMapper) tempMapper_<%=cid%>;
    tempMapper_<%=cid%> = new SimplePartitionMapper("<%=family%>", "<%=originalName%>", localMapper_<%=cid%>.plugin(), (java.io.Serializable) localMapper_<%=cid%>.getDelegate());
}
    
    
int nbLineInput_<%=cid%> = 0;

org.talend.sdk.component.runtime.di.JobStateAware.init(tempMapper_<%=cid%>, globalMap);
tempMapper_<%=cid%>.start();
final org.talend.sdk.component.runtime.manager.chain.ChainedMapper mapper_<%=cid%>;
try {
    final java.util.List<org.talend.sdk.component.runtime.input.Mapper> splitMappers_<%=cid%> = tempMapper_<%=cid%>.split(tempMapper_<%=cid%>.assess());
    mapper_<%=cid%> = new org.talend.sdk.component.runtime.manager.chain.ChainedMapper(tempMapper_<%=cid%>, splitMappers_<%=cid%>.iterator());
    mapper_<%=cid%>.start();
    globalMap.put("mapper_<%=cid%>", mapper_<%=cid%>);
} finally {
    try {
        tempMapper_<%=cid%>.stop();
    } catch (final RuntimeException re) {
        re.printStackTrace();
    }
}

final org.talend.sdk.component.runtime.input.Input input_<%=cid%> = mapper_<%=cid%>.create();
input_<%=cid%>.start();
globalMap.put("input_<%=cid%>", input_<%=cid%>);

<%
final List<? extends IConnection> connections = node.getOutgoingConnections(EConnectionType.FLOW_MAIN);
if (connections.isEmpty()) {
    throw new RuntimeException("Missing output connection for component " + family + "#" + originalName);
}
final String output = connections.iterator().next().getName();
%>

final javax.json.bind.Jsonb jsonb_<%=cid%> = (javax.json.bind.Jsonb)mgr_<%=cid%>.findPlugin(mapper_<%=cid%>.plugin()).get()
                                                     .get(org.talend.sdk.component.runtime.manager.ComponentManager.AllServices.class)
                                                     .getServices().get(javax.json.bind.Jsonb.class);

final java.util.Map<Class<?>, Object> servicesMapper_<%=cid%> = mgr_<%=cid%>.findPlugin(mapper_<%=cid%>.plugin()).get().get(org.talend.sdk.component.runtime.manager.ComponentManager.AllServices.class).getServices();
final javax.json.spi.JsonProvider jsonProvider_<%=cid%> = javax.json.spi.JsonProvider.class.cast(servicesMapper_<%=cid%>.get(javax.json.spi.JsonProvider.class));
final javax.json.JsonBuilderFactory jsonBuilderFactory_<%=cid%> = javax.json.JsonBuilderFactory.class.cast(servicesMapper_<%=cid%>.get(javax.json.JsonBuilderFactory.class));
final org.talend.sdk.component.api.service.record.RecordBuilderFactory recordBuilderMapper_<%=cid%> = org.talend.sdk.component.api.service.record.RecordBuilderFactory.class.cast(servicesMapper_<%=cid%>
                                                                                                                        .get(org.talend.sdk.component.api.service.record.RecordBuilderFactory.class));
final org.talend.sdk.component.runtime.record.RecordConverters converters_<%=cid%> = new org.talend.sdk.component.runtime.record.RecordConverters();

final Class<?> outputType_<%=cid%> = <%=output%>.getClass();

final org.apache.johnzon.mapper.Mapper mapperJson_<%=cid%> = new org.apache.johnzon.mapper.MapperBuilder().build();

Object data_<%=cid%>;
while ((data_<%=cid%> = input_<%=cid%>.next()) != null) {
    nbLineInput_<%=cid%>++;
    globalMap.put("<%=cid %>_NB_LINE", nbLineInput_<%=cid%>);

    if (javax.json.JsonStructure.class.isInstance(data_<%=cid%>)) {
        <%=output%> = mapperJson_<%=cid%>.readObject((javax.json.JsonStructure) data_<%=cid%>, outputType_<%=cid%>);
    } 
    else if (org.talend.sdk.component.api.record.Record.class.isInstance(data_<%=cid%>)) {
        <%=output%> = <%=output%>.getClass().cast(converters_<%=cid%>.toType(
            registry_<%=cid%>, 
            (org.talend.sdk.component.api.record.Record) data_<%=cid%>,
            outputType_<%=cid%>,
            () -> jsonBuilderFactory_<%=cid%>,
            () -> jsonProvider_<%=cid%>,
            () -> jsonb_<%=cid%>,
            () -> recordBuilderMapper_<%=cid%>,
            registry_metadata_<%=cid%>));
    } 
    else {
        final String jsonValueMapper_<%=cid%> = jsonb_<%=cid%>.toJson(data_<%=cid%>);
        <%=output%> = jsonb_<%=cid%>.fromJson(jsonValueMapper_<%=cid%>, <%=output%>.getClass());
    }
